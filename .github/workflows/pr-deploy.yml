name: PR Future Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
    paths:
      - "front/**"
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to deploy"
        required: true
        type: string
      scale:
        description: "Instance scale (XS, S, M, L, XL, XXL)"
        required: false
        default: "XS"
        type: choice
        options:
          - XS
          - S
          - M
          - L
          - XL
          - XXL
      force_deploy:
        description: "Force deployment (ignore fast-forward)"
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    name: Deploy PR to Clever Cloud
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "scale=${{ github.event.inputs.scale }}" >> $GITHUB_OUTPUT
            echo "force_deploy=${{ github.event.inputs.force_deploy }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
            echo "scale=XS" >> $GITHUB_OUTPUT
            echo "force_deploy=false" >> $GITHUB_OUTPUT
          fi

          # Set app alias based on PR number
          echo "app_alias=eclaireur-pr-${{ github.event.number || github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          echo "app_url=https://eclaireur-pr-${{ github.event.number || github.event.inputs.pr_number }}.cleverapps.io" >> $GITHUB_OUTPUT

      - name: Install Clever CLI
        run: |
          curl -O https://clever-tools.clever-cloud.com/releases/latest/clever-tools-latest_linux.tar.gz
          tar xvzf clever-tools-latest_linux.tar.gz
          sudo mv clever-tools-latest_linux/clever /usr/local/bin/
          rm -rf clever-tools-latest_linux*

      - name: Setup Clever CLI credentials  
        run: |
          mkdir -p ~/.config/clever-cloud
          echo '{"token":"${{ secrets.CLEVER_TOKEN }}","secret":"${{ secrets.CLEVER_SECRET }}"}' > ~/.config/clever-cloud/clever-tools.json
          
      - name: Verify credentials and login
        run: |
          echo "Checking credentials file..."
          ls -la ~/.config/clever-cloud/
          cat ~/.config/clever-cloud/clever-tools.json
          
          echo "Attempting login..."
          clever login --token "${{ secrets.CLEVER_TOKEN }}" --secret "${{ secrets.CLEVER_SECRET }}"
          
          echo "Checking login status..."
          clever profile

      - name: Create or get Clever Cloud app
        id: clever_app
        run: |
          cd front
          
          APP_NAME="${{ steps.vars.outputs.app_alias }}"
          ORG_ID="${{ secrets.ORGA_ID }}"

          # Check if app already exists (handle JSON parsing errors)
          APP_ID=$(clever applications --format json 2>/dev/null | jq -r ".[] | select(.name == \"$APP_NAME\") | .id" 2>/dev/null || echo "")

          if [ -z "$APP_ID" ]; then
            echo "Creating new Clever Cloud app: $APP_NAME"
            clever create --type node --alias "$APP_NAME" --region par --org "$ORG_ID"
            APP_ID=$(clever applications --format json | jq -r ".[] | select(.name == \"$APP_NAME\") | .id")
            
            # Scale the instance
            clever scale --flavor "${{ steps.vars.outputs.scale }}"
            
            echo "Created app with ID: $APP_ID"
          else
            echo "Using existing app: $APP_ID"
            clever link "$APP_ID"
            
            # Update scale if needed
            clever scale --flavor "${{ steps.vars.outputs.scale }}"
          fi

          echo "app_id=$APP_ID" >> $GITHUB_OUTPUT

      - name: Set environment variables
        run: |
          cd front
          clever login --token "${{ secrets.CLEVER_TOKEN }}" --secret "${{ secrets.CLEVER_SECRET }}"
          # Only set environment variables that have values
          [ -n "${{ secrets.CC_CACHE_DEPENDENCIES }}" ] && clever env set CC_CACHE_DEPENDENCIES "${{ secrets.CC_CACHE_DEPENDENCIES }}" || echo "Skipping CC_CACHE_DEPENDENCIES (empty)"
          [ -n "${{ secrets.CC_CGI_IMPLEMENTATION }}" ] && clever env set CC_CGI_IMPLEMENTATION "${{ secrets.CC_CGI_IMPLEMENTATION }}" || echo "Skipping CC_CGI_IMPLEMENTATION (empty)"
          [ -n "${{ secrets.CC_NODE_DEV_DEPENDENCIES }}" ] && clever env set CC_NODE_DEV_DEPENDENCIES "${{ secrets.CC_NODE_DEV_DEPENDENCIES }}" || echo "Skipping CC_NODE_DEV_DEPENDENCIES (empty)"
          [ -n "${{ secrets.CC_WEBROOT }}" ] && clever env set CC_WEBROOT "${{ secrets.CC_WEBROOT }}" || echo "Skipping CC_WEBROOT (empty)"
          [ -n "${{ secrets.HOST }}" ] && clever env set HOST "${{ secrets.HOST }}" || echo "Skipping HOST (empty)"
          [ -n "${{ secrets.NODE_ENV }}" ] && clever env set NODE_ENV "${{ secrets.NODE_ENV }}" || echo "Skipping NODE_ENV (empty)"
          [ -n "${{ secrets.PORT }}" ] && clever env set PORT "${{ secrets.PORT }}" || echo "Skipping PORT (empty)"
          clever env set NEXT_PUBLIC_BASE_URL "${{ steps.vars.outputs.app_url }}"
          [ -n "${{ secrets.POSTGRESQL_ADDON_HOST }}" ] && clever env set POSTGRESQL_ADDON_HOST "${{ secrets.POSTGRESQL_ADDON_HOST }}" || echo "Skipping POSTGRESQL_ADDON_HOST (empty)"
          [ -n "${{ secrets.POSTGRESQL_ADDON_DB }}" ] && clever env set POSTGRESQL_ADDON_DB "${{ secrets.POSTGRESQL_ADDON_DB }}" || echo "Skipping POSTGRESQL_ADDON_DB (empty)"
          [ -n "${{ secrets.POSTGRESQL_ADDON_USER }}" ] && clever env set POSTGRESQL_ADDON_USER "${{ secrets.POSTGRESQL_ADDON_USER }}" || echo "Skipping POSTGRESQL_ADDON_USER (empty)"
          [ -n "${{ secrets.POSTGRESQL_ADDON_PORT }}" ] && clever env set POSTGRESQL_ADDON_PORT "${{ secrets.POSTGRESQL_ADDON_PORT }}" || echo "Skipping POSTGRESQL_ADDON_PORT (empty)"
          [ -n "${{ secrets.POSTGRESQL_ADDON_PASSWORD }}" ] && clever env set POSTGRESQL_ADDON_PASSWORD "${{ secrets.POSTGRESQL_ADDON_PASSWORD }}" || echo "Skipping POSTGRESQL_ADDON_PASSWORD (empty)"
          [ -n "${{ secrets.POSTGRESQL_ADDON_URI }}" ] && clever env set POSTGRESQL_ADDON_URI "${{ secrets.POSTGRESQL_ADDON_URI }}" || echo "Skipping POSTGRESQL_ADDON_URI (empty)"
          clever env set CC_NODE_BUILD_TOOL "yarn"
          clever env set NODE_OPTIONS "--max-old-space-size=${{ steps.vars.outputs.scale == 'XS' && '1024' || steps.vars.outputs.scale == 'S' && '2048' || steps.vars.outputs.scale == 'M' && '4096' || '8192' }}"
          clever env set CC_PRE_BUILD_HOOK "yarn cache clean"

      - name: Deploy to Clever Cloud
        run: |
          cd front
          clever login --token "${{ secrets.CLEVER_TOKEN }}" --secret "${{ secrets.CLEVER_SECRET }}"
          if [ "${{ steps.vars.outputs.force_deploy }}" = "true" ]; then
            clever deploy --force
          else
            clever deploy
          fi

      - name: Update PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Future PR Deployment')
            );

            const commentBody = `🚀 **Future PR Deployment**

            ✅ **Deployed successfully**
            - **URL**: ${{ steps.vars.outputs.app_url }}
            - **Scale**: ${{ steps.vars.outputs.scale }}
            - **Branch**: \`${{ github.head_ref }}\`
            - **Commit**: \`${{ github.event.pull_request.head.sha }}\`

            ---
            *Deployment managed by GitHub Action*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  cleanup:
    name: Cleanup deployment
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Update PR comment on close
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Future PR Deployment')
            );

            if (botComment) {
              const commentBody = `🚀 **Future PR Deployment**
              
              ⚠️ **Deployment cleaned up**
              - PR has been closed/merged
              - Resources may be automatically cleaned up by Clever Cloud
              
              ---
              *Deployment managed by GitHub Action*`;
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            }
